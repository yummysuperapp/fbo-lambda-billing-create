name: 🚀 Build & Deploy

on:
  workflow_run:
    workflows: ["🧪 Test & Quality Assurance"]
    types: [completed]
    branches: [ master, develop ]

env:
  NODE_VERSION: '22.x'

jobs:
  check-tests:
    name: "🔍 Verify Tests & Environment"
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    
    outputs:
      deploy-ready: ${{ steps.check.outputs.ready }}
      target-env: ${{ steps.env.outputs.environment }}
      workflow-info: ${{ steps.info.outputs.workflow-data }}
    
    steps:
    - name: "📋 Gather workflow information"
      id: info
      run: |
        echo "## 📊 Workflow Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Branch**: ${{ github.event.workflow_run.head_branch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit SHA**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Number**: ${{ github.event.workflow_run.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Conclusion**: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
        
        # Store workflow data for other jobs
        echo "workflow-data={\"branch\":\"${{ github.event.workflow_run.head_branch }}\",\"sha\":\"${{ github.event.workflow_run.head_sha }}\",\"run_number\":\"${{ github.event.workflow_run.run_number }}\"}" >> $GITHUB_OUTPUT

    - name: "✅ Validate test results"
      id: check
      run: |
        if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
          echo "✅ Tests passed successfully in workflow: ${{ github.event.workflow_run.name }}"
          echo "ready=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Tests failed or workflow was not successful"
          echo "ready=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: "🎯 Determine deployment environment"
      id: env
      run: |
        BRANCH="${{ github.event.workflow_run.head_branch }}"
        
        case "$BRANCH" in
          "master")
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "🏭 Target environment: **Production**"
            echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
            echo "- **Deployment Type**: Full release" >> $GITHUB_STEP_SUMMARY
            ;;
          "develop")
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "🧪 Target environment: **Development**"
            echo "- **Environment**: Development" >> $GITHUB_STEP_SUMMARY
            echo "- **Deployment Type**: Development build" >> $GITHUB_STEP_SUMMARY
            ;;
          "testing")
            echo "environment=testing" >> $GITHUB_OUTPUT
            echo "🔬 Target environment: **Testing**"
            echo "- **Environment**: Testing" >> $GITHUB_STEP_SUMMARY
            echo "- **Deployment Type**: Testing build" >> $GITHUB_STEP_SUMMARY
            ;;
          *)
            echo "environment=none" >> $GITHUB_OUTPUT
            echo "❌ No deployment configured for branch: **$BRANCH**"
            echo "- **Environment**: None (branch not configured for deployment)" >> $GITHUB_STEP_SUMMARY
            echo "- **Supported branches**: master (production), develop (development), testing (testing)" >> $GITHUB_STEP_SUMMARY
            ;;
        esac

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: check-tests
    if: needs.check-tests.outputs.deploy-ready == 'true' && needs.check-tests.outputs.target-env != 'none'
    environment: ${{ github.ref == 'refs/heads/develop' && 'Dev' || github.ref == 'refs/heads/testing' && 'Test' || github.ref == 'refs/heads/master'  && 'Prod' }}

    outputs:
      build-success: ${{ steps.build-result.outputs.success }}
      package-size: ${{ steps.size-check.outputs.size }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build project
      run: npm run build

    - name: 🧹 Clean node_modules for production
      run: rm -rf node_modules

    - name: 📦 Install production dependencies only
      run: npm ci --production --silent

    - name: 📦 Create optimized deployment package
      run: |
        # Create temporary directory for packaging
        TEMP_DIR="temp-lambda-package"
        rm -rf "$TEMP_DIR"
        mkdir -p "$TEMP_DIR"
        
        # Copy required files
        cp -r dist "$TEMP_DIR/"
        cp package.json "$TEMP_DIR/"
        cp index.mjs "$TEMP_DIR/"
        
        # Copy node_modules excluding unnecessary files
        mkdir -p "$TEMP_DIR/node_modules"
        
        # Use rsync to copy node_modules with exclusions
        rsync -a --exclude='*.md' \
                 --exclude='*.txt' \
                 --exclude='*.log' \
                 --exclude='*.map' \
                 --exclude='*.d.ts.map' \
                 --exclude='*.test.js' \
                 --exclude='*.spec.js' \
                 --exclude='*.test.ts' \
                 --exclude='*.spec.ts' \
                 --exclude='Gruntfile.js' \
                 --exclude='gulpfile.js' \
                 --exclude='Makefile' \
                 --exclude='*.mk' \
                 --exclude='*.gyp' \
                 --exclude='*.gypi' \
                 --exclude='.eslintrc*' \
                 --exclude='.jshintrc' \
                 --exclude='.jscsrc' \
                 --exclude='.babelrc*' \
                 --exclude='tsconfig.json' \
                 --exclude='tslint.json' \
                 --exclude='*.tgz' \
                 --exclude='*.tar.gz' \
                 --exclude='.git/' \
                 --exclude='test/' \
                 --exclude='tests/' \
                 --exclude='__tests__/' \
                 --exclude='spec/' \
                 --exclude='specs/' \
                 --exclude='example/' \
                 --exclude='examples/' \
                 --exclude='demo/' \
                 --exclude='demos/' \
                 --exclude='doc/' \
                 --exclude='docs/' \
                 --exclude='documentation/' \
                 --exclude='.nyc_output/' \
                 --exclude='coverage/' \
                 --exclude='.cache/' \
                 --exclude='cache/' \
                 --exclude='tmp/' \
                 --exclude='temp/' \
                 node_modules/ "$TEMP_DIR/node_modules/"
        
        # Create the zip package
        cd "$TEMP_DIR"
        zip -r ../${{ github.sha }}.zip .
        cd ..
        
        # Clean up temp directory
        rm -rf "$TEMP_DIR"

    - name: 📊 Validate package size
      id: package-and-validate
      run: |
        zip -r "${{ github.sha }}.zip" .
        size_bytes=$(du -sb "${{ github.sha }}.zip" | cut -f1)
        echo "ZIP size: $(( size_bytes/1024 )) KB"
        if [ "$size_bytes" -gt 52428800 ]; then
          echo "Error: ZIP > 50MB"
          exit 1
        fi

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-package-${{ github.event.workflow_run.run_number }}
        path: ${{ github.sha }}.zip
        retention-days: 10
        if-no-files-found: error
        compression-level: 6

    - name: 🚀 Deploy to Lambda
      id: deploy-version
      if: success()
      run: |
        # Determine environment name for display
        case "${{ needs.check-tests.outputs.target-env }}" in
          "production")
            ENV_NAME="Production"
            ;;
          "development")
            ENV_NAME="Development"
            ;;
          "testing")
            ENV_NAME="Testing"
            ;;
          *)
            echo "❌ Unknown environment: ${{ needs.check-tests.outputs.target-env }}"
            exit 1
            ;;
        esac
        
        echo ">>> Region: ${{ secrets.AWS_REGION }}"
        echo ">>> Lambda Function: ${{ secrets.LAMBDA_FUNCTION_NAME }}"
        echo "🚀 Deploying to $ENV_NAME Lambda..."
        
        aws lambda update-function-code \
          --function-name "${{ secrets.LAMBDA_FUNCTION_NAME }}" \
          --zip-file fileb://${{ github.sha }}.zip
        
        # Store function name for later steps
        echo "function-name=${{ secrets.LAMBDA_FUNCTION_NAME }}" >> $GITHUB_OUTPUT

    - name: Remove Temporary Deployment Package
      run: rm -f ${{ github.sha }}.zip

    - name: ✅ Set build result
      id: build-result
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ ${{ needs.check-tests.outputs.target-env }} deployment completed successfully"
          echo "🔗 Function: ${{ secrets.LAMBDA_FUNCTION_NAME }}"
          echo "🌍 Region: ${{ secrets.AWS_REGION }}"
          echo "✅ Build completed successfully"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "❌ ${{ needs.check-tests.outputs.target-env }} deployment failed"
          echo "🔗 Function: ${{ secrets.LAMBDA_FUNCTION_NAME }}"
          echo "🌍 Region: ${{ secrets.AWS_REGION }}"
          echo "❌ Build failed"
          exit 1
        fi

  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [check-tests, build]
    if: always() && needs.check-tests.outputs.deploy-ready == 'true'
    environment: ${{ needs.check-tests.outputs.target-env == 'development' && 'Dev' || needs.check-tests.outputs.target-env == 'production' && 'Prod' || 'None' }}
    
    steps:
    - name: 📊 Generate deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.check-tests.outputs.target-env == 'development' && '🧪 Development' || needs.check-tests.outputs.target-env == 'production' && '🏭 Production' || '❌ None' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status**: ${{ needs.build.outputs.build-success == 'true' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Status**: ${{ needs.build.outputs.build-success == 'true' && '✅ Deployed' || '❌ Not Deployed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Source Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.event.workflow_run.head_branch }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.event.workflow_run.head_sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow Run**: \`${{ github.event.workflow_run.run_number }}\`" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.check-tests.outputs.target-env }}" == "production" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Tag**: \`v${{ github.event.workflow_run.run_number }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⏰ Execution Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered At**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Node Version**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY