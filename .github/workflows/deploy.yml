name: Build & Deploy

on:
  # üîÑ Trigger after successful testing
  workflow_run:
    workflows: ["Testing Report"]
    types:
      - completed
  push:
    branches:
      - develop
      - master
      - testing

# üö´ Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    name: üöÄ Deploy to Lambda
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/develop' && 'Dev' || github.ref == 'refs/heads/master' && 'Prod' || github.ref == 'refs/heads/testing' && 'Test' }}
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      NODE_ENV: ${{ github.ref == 'refs/heads/master' && 'production' || github.ref == 'refs/heads/testing' && 'testing' || 'development' }}
      LOG_LEVEL: ${{ github.ref == 'refs/heads/master' && 'warn' || 'debug' }}
      ENVIRONMENT: ${{ github.ref == 'refs/heads/master' && 'Prod' || github.ref == 'refs/heads/testing' && 'Test' || 'Dev' }}
      AWS_APP_NAME: ${{ secrets.AWS_APP_NAME }}
      BIGQUERY_PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
      BIGQUERY_PRIVATE_KEY: ${{ secrets.BIGQUERY_PRIVATE_KEY }}
      BIGQUERY_CLIENT_EMAIL: ${{ secrets.BIGQUERY_CLIENT_EMAIL }}
      X_API_KEY: ${{ secrets.X_API_KEY }}

    steps:
    - name: üì• Checkout Source Code
      uses: actions/checkout@v4

    - name: üü¢ Initialize Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: npm

    - name: üîß Install Global Tools
      run: npm i -g rimraf --yes

    - name: üì¶ Install Project Dependencies
      run: npm ci --silent

    - name: üèóÔ∏è Build Project
      run: npm run build

    - name: üîê Set AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: ‚úÖ Validate required environment variables
      run: |
        # Initialize error flag
        has_errors=false
        
        echo "üîç Validating required environment variables..."
        
        # Check critical AWS variables
        if [ -z "${{ env.LAMBDA_FUNCTION_NAME }}" ]; then
          echo "‚ùå Missing: LAMBDA_FUNCTION_NAME"
          has_errors=true
        fi
        
        if [ -z "${{ env.AWS_REGION }}" ]; then
          echo "‚ùå Missing: AWS_REGION"
          has_errors=true
        fi
        
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "‚ùå Missing: AWS_ACCESS_KEY_ID"
          has_errors=true
        fi
        
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "‚ùå Missing: AWS_SECRET_ACCESS_KEY"
          has_errors=true
        fi
        
        # Check application variables
        if [ -z "${{ env.NODE_ENV }}" ]; then
          echo "‚ùå Missing: NODE_ENV"
          has_errors=true
        fi
        
        if [ -z "${{ env.ENVIRONMENT }}" ]; then
          echo "‚ùå Missing: ENVIRONMENT"
          has_errors=true
        fi
        
        if [ -z "${{ env.BIGQUERY_PROJECT_ID }}" ]; then
          echo "‚ùå Missing: BIGQUERY_PROJECT_ID"
          has_errors=true
        fi
        
        # Exit if any errors found
        if [ "$has_errors" = "true" ]; then
          echo "‚ùå One or more required environment variables are missing"
          exit 1
        fi
        
        echo "‚úÖ All required environment variables are present"

    - name: üì¶ Create optimized deployment package
      run: |
        # Create temporary directory for packaging
        TEMP_DIR="temp-lambda-package"
        rm -rf "$TEMP_DIR"
        mkdir -p "$TEMP_DIR"
        
        # Copy required files with error checking
        if [ ! -d "dist" ]; then
          echo "‚ùå Error: dist directory not found. Make sure build step completed successfully."
          exit 1
        fi
        
        if [ ! -f "package.json" ]; then
          echo "‚ùå Error: package.json not found"
          exit 1
        fi
        
        if [ ! -f "index.mjs" ]; then
          echo "‚ùå Error: index.mjs not found"
          exit 1
        fi
        
        cp -r dist "$TEMP_DIR/" || { echo "‚ùå Error copying dist directory"; exit 1; }
        cp package.json "$TEMP_DIR/" || { echo "‚ùå Error copying package.json"; exit 1; }
        cp index.mjs "$TEMP_DIR/" || { echo "‚ùå Error copying index.mjs"; exit 1; }
        
        # Copy node_modules excluding unnecessary files
        mkdir -p "$TEMP_DIR/node_modules"
        
        # Copy node_modules with exclusions using tar
        if [ -d "node_modules" ]; then
          tar --exclude='*.md' \
              --exclude='*.txt' \
              --exclude='*.log' \
              --exclude='*.map' \
              --exclude='*.d.ts.map' \
              --exclude='*.test.js' \
              --exclude='*.spec.js' \
              --exclude='*.test.ts' \
              --exclude='*.spec.ts' \
              --exclude='Gruntfile.js' \
              --exclude='gulpfile.js' \
              --exclude='Makefile' \
              --exclude='*.mk' \
              --exclude='*.gyp' \
              --exclude='*.gypi' \
              --exclude='.eslintrc*' \
              --exclude='.jshintrc' \
              --exclude='.jscsrc' \
              --exclude='.babelrc*' \
              --exclude='tsconfig.json' \
              --exclude='tslint.json' \
              --exclude='*.tgz' \
              --exclude='*.tar.gz' \
              --exclude='test' \
              --exclude='tests' \
              --exclude='__tests__' \
              --exclude='spec' \
              --exclude='specs' \
              --exclude='example' \
              --exclude='examples' \
              --exclude='demo' \
              --exclude='demos' \
              --exclude='doc' \
              --exclude='docs' \
              --exclude='documentation' \
              --exclude='.nyc_output' \
              --exclude='coverage' \
              --exclude='.cache' \
              --exclude='cache' \
              --exclude='tmp' \
              --exclude='temp' \
              -cf - node_modules | (cd "$TEMP_DIR" && tar -xf -)
        fi
        
        # Create the zip package
        cd "$TEMP_DIR"
        
        # Ensure temp directory exists
        mkdir -p "/tmp"
        
        # Create zip package
        zip -r "/tmp/${{ github.sha }}.zip" .
        cd ..
        
        # Verify zip was created
        if [ ! -f "/tmp/${{ github.sha }}.zip" ]; then
          echo "‚ùå Error: Failed to create ZIP package"
          exit 1
        fi
        
        echo "‚úÖ ZIP package created successfully"
        
        # Clean up temp directory
        rm -rf "$TEMP_DIR"

    - name: üìä Validate package size
      id: package-and-validate
      run: |
        if [ ! -f "/tmp/${{ github.sha }}.zip" ]; then
          echo "Error: Package file not found"
          exit 1
        fi
        # Get file size using multiple methods for compatibility
        if command -v stat >/dev/null 2>&1 && stat -c%s "/tmp/${{ github.sha }}.zip" >/dev/null 2>&1; then
          size_bytes=$(stat -c%s "/tmp/${{ github.sha }}.zip")
        elif command -v wc >/dev/null 2>&1; then
          size_bytes=$(wc -c < "/tmp/${{ github.sha }}.zip")
        elif command -v du >/dev/null 2>&1 && du -b "/tmp/${{ github.sha }}.zip" >/dev/null 2>&1; then
          size_bytes=$(du -b "/tmp/${{ github.sha }}.zip" | cut -f1)
        else
          # Fallback using ls -l with better error handling
          if ls -l "/tmp/${{ github.sha }}.zip" >/dev/null 2>&1; then
            size_bytes=$(ls -l "/tmp/${{ github.sha }}.zip" | awk '{print $5}')
          else
            echo "‚ùå Error: Cannot access package file for size calculation"
            exit 1
          fi
        fi
        
        # Validate that we got a valid size
        if [ -z "$size_bytes" ] || ! [ "$size_bytes" -gt 0 ] 2>/dev/null; then
          echo "‚ùå Error: Could not determine package size or size is invalid"
          exit 1
        fi
        size_kb=$(( size_bytes/1024 ))
        size_mb=$(( size_bytes/1048576 ))
        echo "üì¶ Package size: ${size_kb} KB (${size_mb} MB)"
        if [ "$size_bytes" -gt 52428800 ]; then
          echo "‚ùå Error: Package size (${size_mb} MB) exceeds AWS Lambda limit of 50MB"
          exit 1
        fi
        echo "‚úÖ Package size validation passed"

    - name: üì§ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-package-${{ github.sha }}
        path: /tmp/${{ github.sha }}.zip
        retention-days: 7

    - name: üöÄ Deploy to AWS Lambda
      run: |
        echo "üöÄ Deploying to Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        
        # Check if function exists
        if ! aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} >/dev/null 2>&1; then
          echo "‚ùå Lambda function '${{ env.LAMBDA_FUNCTION_NAME }}' not found"
          echo "Please create the function first or check the function name"
          exit 1
        fi
        
        # Deploy the code
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb:///tmp/${{ github.sha }}.zip \
          --no-cli-pager
        
        echo "‚úÖ Code deployment completed"

    - name: ‚öôÔ∏è Update Lambda Configuration
      run: |
        echo "‚öôÔ∏è Updating Lambda configuration..."
        
        # Wait for function to be ready after code update
        echo "‚è≥ Waiting for function to be ready..."
        aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
        
        # Create environment variables JSON using only available secrets
        ENV_VARS=$(jq -nc \
          --arg BIGQUERY_CLIENT_EMAIL "${{ secrets.BIGQUERY_CLIENT_EMAIL }}" \
          --arg BIGQUERY_PRIVATE_KEY "${{ secrets.BIGQUERY_PRIVATE_KEY }}" \
          --arg BIGQUERY_PROJECT_ID "${{ secrets.BIGQUERY_PROJECT_ID }}" \
          --arg FINANCE_API_BASE_URL "${{ secrets.FINANCE_API_BASE_URL }}" \
          --arg FINANCE_API_KEY "${{ secrets.FINANCE_API_KEY }}" \
          --arg LAMBDA_FUNCTION_NAME "${{ secrets.LAMBDA_FUNCTION_NAME }}" \
          --arg X_API_KEY "${{ secrets.X_API_KEY }}" \
          '{"Variables":{"BIGQUERY_CLIENT_EMAIL":$BIGQUERY_CLIENT_EMAIL,"BIGQUERY_PRIVATE_KEY":$BIGQUERY_PRIVATE_KEY,"BIGQUERY_PROJECT_ID":$BIGQUERY_PROJECT_ID,"FINANCE_API_BASE_URL":$FINANCE_API_BASE_URL,"FINANCE_API_KEY":$FINANCE_API_KEY,"LAMBDA_FUNCTION_NAME":$LAMBDA_FUNCTION_NAME,"X_API_KEY":$X_API_KEY}}')
        
        # Update configuration
        aws lambda update-function-configuration \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --environment "$ENV_VARS" \
          --timeout 30 \
          --memory-size 512 \
          --no-cli-pager
        
        echo "‚úÖ Configuration update completed"

    - name: üßπ Clean Up Temporary Files
      if: always()
      run: |
        echo "üßπ Cleaning up temporary files..."
        
        # Remove ZIP file if exists
        if [ -f "/tmp/${{ github.sha }}.zip" ]; then
          rm -f "/tmp/${{ github.sha }}.zip"
          echo "‚úÖ Removed ZIP file"
        fi
        
        # Remove package directory if exists
        if [ -d "/tmp/lambda-package-${{ github.sha }}" ]; then
          rm -rf "/tmp/lambda-package-${{ github.sha }}"
          echo "‚úÖ Removed package directory"
        fi
        
        echo "üßπ Cleanup completed"
        
    - name: üéâ Deployment Summary
      if: success()
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üìã Summary:"
        echo "  ‚Ä¢ Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "  ‚Ä¢ Region: ${{ env.AWS_REGION }}"
        echo "  ‚Ä¢ Environment: ${{ env.ENVIRONMENT }}"
        echo "  ‚Ä¢ Commit: ${{ github.sha }}"
        echo "  ‚Ä¢ Triggered by: ${{ github.event_name }}"
        
        # Get function info
        echo "üìä Function details:"
        aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query 'Configuration.{Runtime:Runtime,Timeout:Timeout,MemorySize:MemorySize,LastModified:LastModified}' \
          --output table --no-cli-pager