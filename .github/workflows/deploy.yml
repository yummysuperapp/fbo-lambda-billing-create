name: üöÄ Build & Deploy

on:
  workflow_run:
    workflows: ["üß™ Test & Quality Assurance"]
    types: [completed]
    branches: [ master, develop ]

env:
  NODE_VERSION: '22.x'

jobs:
  check-tests:
    name: üîç Verify Tests Passed
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    
    outputs:
      deploy-ready: ${{ steps.check.outputs.ready }}
      target-env: ${{ steps.env.outputs.environment }}
    
    steps:
    - name: ‚úÖ Confirm tests passed
      id: check
      run: |
        echo "Tests passed successfully in previous workflow"
        echo "ready=true" >> $GITHUB_OUTPUT

    - name: üéØ Determine target environment
      id: env
      run: |
        if [ "${{ github.event.workflow_run.head_branch }}" == "master" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "üè≠ Target environment: Production"
        elif [ "${{ github.event.workflow_run.head_branch }}" == "develop" ]; then
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "üß™ Target environment: Development"
        else
          echo "environment=none" >> $GITHUB_OUTPUT
          echo "‚ùå No deployment for branch: ${{ github.event.workflow_run.head_branch }}"
        fi

  build:
    name: üèóÔ∏è Build Application
    runs-on: ubuntu-latest
    needs: check-tests
    if: needs.check-tests.outputs.deploy-ready == 'true' && needs.check-tests.outputs.target-env != 'none'
    
    outputs:
      build-success: ${{ steps.build-result.outputs.success }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üèóÔ∏è Build project
      run: npm run build

    - name: üßπ Clean node_modules for production
      run: rm -rf node_modules

    - name: üì¶ Install production dependencies only
      run: npm ci --production --silent

    - name: üì¶ Create optimized deployment package
      run: |
        # Remove existing package
        rm -f lambda-deployment.zip
        
        # Create temporary directory for packaging
        TEMP_DIR="temp-lambda-package"
        rm -rf "$TEMP_DIR"
        mkdir -p "$TEMP_DIR"
        
        # Copy required files
        cp -r dist "$TEMP_DIR/"
        cp package.json "$TEMP_DIR/"
        cp index.mjs "$TEMP_DIR/"
        
        # Copy node_modules excluding unnecessary files
        mkdir -p "$TEMP_DIR/node_modules"
        
        # Use rsync to copy node_modules with exclusions
        rsync -a --exclude='*.md' \
                 --exclude='*.txt' \
                 --exclude='*.log' \
                 --exclude='*.map' \
                 --exclude='*.d.ts.map' \
                 --exclude='*.test.js' \
                 --exclude='*.spec.js' \
                 --exclude='*.test.ts' \
                 --exclude='*.spec.ts' \
                 --exclude='Gruntfile.js' \
                 --exclude='gulpfile.js' \
                 --exclude='Makefile' \
                 --exclude='*.mk' \
                 --exclude='*.gyp' \
                 --exclude='*.gypi' \
                 --exclude='.eslintrc*' \
                 --exclude='.jshintrc' \
                 --exclude='.jscsrc' \
                 --exclude='.babelrc*' \
                 --exclude='tsconfig.json' \
                 --exclude='tslint.json' \
                 --exclude='*.tgz' \
                 --exclude='*.tar.gz' \
                 --exclude='.git/' \
                 --exclude='test/' \
                 --exclude='tests/' \
                 --exclude='__tests__/' \
                 --exclude='spec/' \
                 --exclude='specs/' \
                 --exclude='example/' \
                 --exclude='examples/' \
                 --exclude='demo/' \
                 --exclude='demos/' \
                 --exclude='doc/' \
                 --exclude='docs/' \
                 --exclude='documentation/' \
                 --exclude='.nyc_output/' \
                 --exclude='coverage/' \
                 --exclude='.cache/' \
                 --exclude='cache/' \
                 --exclude='tmp/' \
                 --exclude='temp/' \
                 node_modules/ "$TEMP_DIR/node_modules/"
        
        # Create the zip package
        cd "$TEMP_DIR"
        zip -r ../lambda-deployment.zip .
        cd ..
        
        # Clean up temp directory
        rm -rf "$TEMP_DIR"

    - name: üìä Validate package size
      run: |
        PACKAGE_SIZE=$(stat -c%s lambda-deployment.zip)
        PACKAGE_SIZE_MB=$((PACKAGE_SIZE / 1024 / 1024))
        MAX_SIZE_MB=50
        
        ls -lh lambda-deployment.zip
        echo "üìä Package size: ${PACKAGE_SIZE_MB}MB"
        
        if [ $PACKAGE_SIZE_MB -gt $MAX_SIZE_MB ]; then
          echo "‚ùå Error: Package size (${PACKAGE_SIZE_MB}MB) exceeds AWS Lambda limit (${MAX_SIZE_MB}MB)"
          echo "üí° Consider removing more dependencies or using Lambda Layers"
          exit 1
        else
          echo "‚úÖ Package size is within AWS Lambda limits"
        fi

    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-deployment-package-${{ github.run_number }}
        path: lambda-deployment.zip
        retention-days: 30

    - name: ‚úÖ Set build result
      id: build-result
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Build completed successfully"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "‚ùå Build failed"
          exit 1
        fi

  deploy-dev:
    name: üß™ Deploy to Development
    runs-on: ubuntu-latest
    needs: [check-tests, build]
    if: |
      needs.check-tests.outputs.target-env == 'development' && 
      needs.build.outputs.build-success == 'true'
    environment: Dev
    
    steps:
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-deployment-package-${{ github.run_number }}

    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: üöÄ Deploy to Lambda
      run: |
        echo "üöÄ Deploying to Development Lambda..."
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://lambda-deployment.zip

    - name: ‚öôÔ∏è Update function configuration
      run: |
        echo "‚öôÔ∏è Updating Development Lambda configuration..."
        aws lambda update-function-configuration \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --environment Variables="{
            \"NODE_ENV\":\"development\",
            \"FINANCE_API_BASE_URL\":\"${{ secrets.FINANCE_API_BASE_URL_DEV }}\",
            \"FINANCE_API_KEY\":\"${{ secrets.FINANCE_API_KEY_DEV }}\",
            \"BIGQUERY_PROJECT_ID\":\"${{ secrets.BIGQUERY_PROJECT_ID }}\",
            \"BIGQUERY_PRIVATE_KEY\":\"${{ secrets.BIGQUERY_PRIVATE_KEY }}\",
            \"BIGQUERY_CLIENT_EMAIL\":\"${{ secrets.BIGQUERY_CLIENT_EMAIL }}\",
            \"X_API_KEY\":\"${{ secrets.X_API_KEY }}\"
          }"

    - name: ‚úÖ Development deployment complete
      run: |
        echo "‚úÖ Development deployment completed successfully"
        echo "üîó Function: ${{ secrets.LAMBDA_FUNCTION_NAME }}"
        echo "üåç Region: ${{ secrets.AWS_REGION }}"

  deploy-prod:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [check-tests, build]
    if: |
      needs.check-tests.outputs.target-env == 'production' && 
      needs.build.outputs.build-success == 'true'
    environment: Prod
    
    steps:
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-deployment-package-${{ github.run_number }}

    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: üöÄ Deploy to Lambda
      run: |
        echo "üöÄ Deploying to Production Lambda..."
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://lambda-deployment.zip

    - name: ‚öôÔ∏è Update function configuration
      run: |
        echo "‚öôÔ∏è Updating Production Lambda configuration..."
        aws lambda update-function-configuration \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --environment Variables="{
            \"NODE_ENV\":\"production\",
            \"FINANCE_API_BASE_URL\":\"${{ secrets.FINANCE_API_BASE_URL_DEV }}\",
            \"FINANCE_API_KEY\":\"${{ secrets.FINANCE_API_KEY_DEV }}\",
            \"BIGQUERY_PROJECT_ID\":\"${{ secrets.BIGQUERY_PROJECT_ID }}\",
            \"BIGQUERY_PRIVATE_KEY\":\"${{ secrets.BIGQUERY_PRIVATE_KEY }}\",
            \"BIGQUERY_CLIENT_EMAIL\":\"${{ secrets.BIGQUERY_CLIENT_EMAIL }}\",
            \"X_API_KEY\":\"${{ secrets.X_API_KEY }}\"
          }"

    - name: üè∑Ô∏è Create release tag
      run: |
        echo "üè∑Ô∏è Creating release tag..."
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and push tag
        TAG_NAME="v${{ github.run_number }}"
        git tag -a $TAG_NAME -m "Production release $TAG_NAME"
        git push origin $TAG_NAME

    - name: üìã Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: üöÄ Production Release v${{ github.run_number }}
        body: |
          ## üöÄ Production Deployment
          
          **Deployed to Production Lambda**: `${{ secrets.LAMBDA_FUNCTION_NAME }}`
          
          ### üìä Build Information
          - **Commit**: ${{ github.event.workflow_run.head_sha }}
          - **Branch**: ${{ github.event.workflow_run.head_branch }}
          - **Workflow Run**: #${{ github.run_number }}
          - **Node.js**: ${{ env.NODE_VERSION }}
          
          ### üîÑ Changes
          ${{ github.event.workflow_run.head_commit.message }}
          
          ---
          *Automated release from GitHub Actions* ü§ñ
        draft: false
        prerelease: false

    - name: ‚úÖ Production deployment complete
      run: |
        echo "‚úÖ Production deployment completed successfully"
        echo "üîó Function: ${{ secrets.LAMBDA_FUNCTION_NAME }}"
        echo "üåç Region: ${{ secrets.AWS_REGION }}"
        echo "üè∑Ô∏è Release: v${{ github.run_number }}"

  deployment-summary:
    name: üìä Deployment Summary
    runs-on: ubuntu-latest
    needs: [check-tests, build, deploy-dev, deploy-prod]
    if: always() && needs.check-tests.outputs.deploy-ready == 'true'
    
    steps:
    - name: üìä Generate deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.check-tests.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.outputs.build-success == 'true' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.check-tests.outputs.target-env }}" == "development" ]; then
          echo "- **Development Deploy**: ${{ needs.deploy-dev.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.check-tests.outputs.target-env }}" == "production" ]; then
          echo "- **Production Deploy**: ${{ needs.deploy-prod.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: v${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- **Branch**: ${{ github.event.workflow_run.head_branch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY