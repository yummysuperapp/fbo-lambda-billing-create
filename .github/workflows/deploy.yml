name: 🚀 Build & Deploy

on:
  workflow_run:
    workflows: ["🧪 Test & Quality Assurance"]
    types: [completed]
    branches: [ master, develop ]

env:
  NODE_VERSION: '20.x'

jobs:
  check-tests:
    name: 🔍 Verify Tests Passed
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    
    outputs:
      deploy-ready: ${{ steps.check.outputs.ready }}
      target-env: ${{ steps.env.outputs.environment }}
    
    steps:
    - name: ✅ Confirm tests passed
      id: check
      run: |
        echo "Tests passed successfully in previous workflow"
        echo "ready=true" >> $GITHUB_OUTPUT

    - name: 🎯 Determine target environment
      id: env
      run: |
        if [ "${{ github.event.workflow_run.head_branch }}" == "master" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "🏭 Target environment: Production"
        elif [ "${{ github.event.workflow_run.head_branch }}" == "develop" ]; then
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "🧪 Target environment: Development"
        else
          echo "environment=none" >> $GITHUB_OUTPUT
          echo "❌ No deployment for branch: ${{ github.event.workflow_run.head_branch }}"
        fi

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: check-tests
    if: needs.check-tests.outputs.deploy-ready == 'true' && needs.check-tests.outputs.target-env != 'none'
    
    outputs:
      build-success: ${{ steps.build-result.outputs.success }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build project
      run: npm run build

    - name: 📦 Create deployment package
      run: npm run package

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-deployment-package-${{ github.run_number }}
        path: lambda-deployment.zip
        retention-days: 30

    - name: ✅ Set build result
      id: build-result
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Build completed successfully"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "❌ Build failed"
          exit 1
        fi

  deploy-dev:
    name: 🧪 Deploy to Development
    runs-on: ubuntu-latest
    needs: [check-tests, build]
    if: |
      needs.check-tests.outputs.target-env == 'development' && 
      needs.build.outputs.build-success == 'true'
    environment: development
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-deployment-package-${{ github.run_number }}

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🚀 Deploy to Lambda
      run: |
        echo "🚀 Deploying to Development Lambda..."
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_DEV }} \
          --zip-file fileb://lambda-deployment.zip

    - name: ⚙️ Update function configuration
      run: |
        echo "⚙️ Updating Development Lambda configuration..."
        aws lambda update-function-configuration \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_DEV }} \
          --environment Variables="{
            \"NODE_ENV\":\"development\",
            \"FINANCE_API_BASE_URL\":\"${{ secrets.FINANCE_API_BASE_URL_DEV }}\",
            \"FINANCE_API_KEY\":\"${{ secrets.FINANCE_API_KEY_DEV }}\",
            \"SFTP_HOST\":\"${{ secrets.SFTP_HOST_DEV }}\",
            \"SFTP_USERNAME\":\"${{ secrets.SFTP_USERNAME_DEV }}\",
            \"SFTP_PASSWORD\":\"${{ secrets.SFTP_PASSWORD_DEV }}\",
            \"S3_BUCKET_NAME\":\"${{ secrets.S3_BUCKET_NAME_DEV }}\",
            \"AWS_REGION\":\"${{ secrets.AWS_REGION }}\"
          }"

    - name: ✅ Development deployment complete
      run: |
        echo "✅ Development deployment completed successfully"
        echo "🔗 Function: ${{ secrets.LAMBDA_FUNCTION_NAME_DEV }}"
        echo "🌍 Region: ${{ secrets.AWS_REGION }}"

  deploy-prod:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [check-tests, build]
    if: |
      needs.check-tests.outputs.target-env == 'production' && 
      needs.build.outputs.build-success == 'true'
    environment: production
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-deployment-package-${{ github.run_number }}

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🚀 Deploy to Lambda
      run: |
        echo "🚀 Deploying to Production Lambda..."
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_PROD }} \
          --zip-file fileb://lambda-deployment.zip

    - name: ⚙️ Update function configuration
      run: |
        echo "⚙️ Updating Production Lambda configuration..."
        aws lambda update-function-configuration \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_PROD }} \
          --environment Variables="{
            \"NODE_ENV\":\"production\",
            \"FINANCE_API_BASE_URL\":\"${{ secrets.FINANCE_API_BASE_URL_PROD }}\",
            \"FINANCE_API_KEY\":\"${{ secrets.FINANCE_API_KEY_PROD }}\",
            \"SFTP_HOST\":\"${{ secrets.SFTP_HOST_PROD }}\",
            \"SFTP_USERNAME\":\"${{ secrets.SFTP_USERNAME_PROD }}\",
            \"SFTP_PASSWORD\":\"${{ secrets.SFTP_PASSWORD_PROD }}\",
            \"S3_BUCKET_NAME\":\"${{ secrets.S3_BUCKET_NAME_PROD }}\",
            \"AWS_REGION\":\"${{ secrets.AWS_REGION }}\"
          }"

    - name: 🏷️ Create release tag
      run: |
        echo "🏷️ Creating release tag..."
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and push tag
        TAG_NAME="v${{ github.run_number }}"
        git tag -a $TAG_NAME -m "Production release $TAG_NAME"
        git push origin $TAG_NAME

    - name: 📋 Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: 🚀 Production Release v${{ github.run_number }}
        body: |
          ## 🚀 Production Deployment
          
          **Deployed to Production Lambda**: `${{ secrets.LAMBDA_FUNCTION_NAME_PROD }}`
          
          ### 📊 Build Information
          - **Commit**: ${{ github.event.workflow_run.head_sha }}
          - **Branch**: ${{ github.event.workflow_run.head_branch }}
          - **Workflow Run**: #${{ github.run_number }}
          - **Node.js**: ${{ env.NODE_VERSION }}
          
          ### 🔄 Changes
          ${{ github.event.workflow_run.head_commit.message }}
          
          ---
          *Automated release from GitHub Actions* 🤖
        draft: false
        prerelease: false

    - name: ✅ Production deployment complete
      run: |
        echo "✅ Production deployment completed successfully"
        echo "🔗 Function: ${{ secrets.LAMBDA_FUNCTION_NAME_PROD }}"
        echo "🌍 Region: ${{ secrets.AWS_REGION }}"
        echo "🏷️ Release: v${{ github.run_number }}"

  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [check-tests, build, deploy-dev, deploy-prod]
    if: always() && needs.check-tests.outputs.deploy-ready == 'true'
    
    steps:
    - name: 📊 Generate deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.check-tests.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.outputs.build-success == 'true' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.check-tests.outputs.target-env }}" == "development" ]; then
          echo "- **Development Deploy**: ${{ needs.deploy-dev.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.check-tests.outputs.target-env }}" == "production" ]; then
          echo "- **Production Deploy**: ${{ needs.deploy-prod.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: v${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- **Branch**: ${{ github.event.workflow_run.head_branch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY