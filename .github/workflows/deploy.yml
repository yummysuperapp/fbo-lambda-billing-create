name: üöÄ Build & Deploy

on:
  workflow_run:
    workflows: ["üß™ Test & Quality Assurance"]
    types: [completed]
    branches: [ master, develop, testing ]
  push:
    branches:
      - develop
      - testing
      - master

permissions:
  contents: read

jobs:
  deploy:
    name: üöÄ Deploy to Lambda
    runs-on: ubuntu-latest
    
    environment: ${{ 
      github.ref == 'refs/heads/develop' && 'Dev' ||
      github.ref == 'refs/heads/testing' && 'Test' ||
      github.ref == 'refs/heads/master' && 'Prod' ||
      'Dev'
    }}
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      NODE_ENV: ${{ 
        github.ref == 'refs/heads/master' && 'production' ||
        github.ref == 'refs/heads/testing' && 'testing' ||
        'development'
      }}
      LOG_LEVEL: ${{ 
        github.ref == 'refs/heads/master' && 'warn' ||
        'debug'
      }}
      ENVIRONMENT: ${{ 
        github.ref == 'refs/heads/master' && 'Prod' ||
        github.ref == 'refs/heads/testing' && 'Test' ||
        'Dev'
      }}
      FINANCE_BASE_URL: ${{ secrets.FINANCE_BASE_URL }}
      FINANCE_API_KEY: ${{ secrets.FINANCE_API_KEY }}
      FINANCE_DISPERSION_ENDPOINT: ${{ secrets.FINANCE_DISPERSION_ENDPOINT }}
      VERTICAL: ${{ secrets.VERTICAL }}
      AWS_APP_NAME: ${{ secrets.AWS_APP_NAME }}
      EXPIRATION_HOURS: ${{ secrets.EXPIRATION_HOURS }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      ALLOWED_S3_BUCKETS: ${{ secrets.ALLOWED_S3_BUCKETS }}
      PG_HOST: ${{ secrets.PG_HOST }}
      PG_PORT: ${{ secrets.PG_PORT }}
      PG_DATABASE: ${{ secrets.PG_DATABASE }}
      PG_USER: ${{ secrets.PG_USER }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      PG_SSL: ${{ secrets.PG_SSL }}
      PG_MAX_CONNECTIONS: ${{ secrets.PG_MAX_CONNECTIONS }}
      PG_CONNECTION_TIMEOUT: ${{ secrets.PG_CONNECTION_TIMEOUT }}
      PG_IDLE_TIMEOUT: ${{ secrets.PG_IDLE_TIMEOUT }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      MONGO_DATABASE: ${{ secrets.MONGO_DATABASE }}
      MONGO_MAX_POOL_SIZE: ${{ secrets.MONGO_MAX_POOL_SIZE }}
      MONGO_MIN_POOL_SIZE: ${{ secrets.MONGO_MIN_POOL_SIZE }}
      MONGO_MAX_IDLE_TIME: ${{ secrets.MONGO_MAX_IDLE_TIME }}
      MONGO_SERVER_SELECTION_TIMEOUT: ${{ secrets.MONGO_SERVER_SELECTION_TIMEOUT }}
      N8N_HOST: ${{ secrets.N8N_HOST }}
      N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
      BIGQUERY_DATASET_ID: ${{ secrets.BIGQUERY_DATASET_ID }}
      BIGQUERY_LOCATION: ${{ secrets.BIGQUERY_LOCATION }}
      BIGQUERY_KEY_FILENAME: ${{ secrets.BIGQUERY_KEY_FILENAME }}
      BIGQUERY_MAX_RETRIES: ${{ secrets.BIGQUERY_MAX_RETRIES }}
      BIGQUERY_AUTO_RETRY: ${{ secrets.BIGQUERY_AUTO_RETRY }}
      BIGQUERY_PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
      BIGQUERY_PRIVATE_KEY: ${{ secrets.BIGQUERY_PRIVATE_KEY }}
      BIGQUERY_CLIENT_EMAIL: ${{ secrets.BIGQUERY_CLIENT_EMAIL }}
      X_API_KEY: ${{ secrets.X_API_KEY }}

    steps:
    - name: üì• Checkout Source Code
      uses: actions/checkout@v4

    - name: üü¢ Initialize Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: npm

    - name: üì¶ Install Dependencies
      run: npm ci --production --silent

    - name: üèóÔ∏è Build Project
      run: npm run build

    - name: üîê Set AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: üì¶ Create optimized deployment package
      run: |
        # Create temporary directory for packaging
        TEMP_DIR="temp-lambda-package"
        rm -rf "$TEMP_DIR"
        mkdir -p "$TEMP_DIR"
        
        # Copy required files
        cp -r dist "$TEMP_DIR/"
        cp package.json "$TEMP_DIR/"
        cp index.mjs "$TEMP_DIR/"
        
        # Copy node_modules excluding unnecessary files
        mkdir -p "$TEMP_DIR/node_modules"
        
        # Use rsync to copy node_modules with exclusions
        rsync -a --exclude='*.md' \
                 --exclude='*.txt' \
                 --exclude='*.log' \
                 --exclude='*.map' \
                 --exclude='*.d.ts.map' \
                 --exclude='*.test.js' \
                 --exclude='*.spec.js' \
                 --exclude='*.test.ts' \
                 --exclude='*.spec.ts' \
                 --exclude='Gruntfile.js' \
                 --exclude='gulpfile.js' \
                 --exclude='Makefile' \
                 --exclude='*.mk' \
                 --exclude='*.gyp' \
                 --exclude='*.gypi' \
                 --exclude='.eslintrc*' \
                 --exclude='.jshintrc' \
                 --exclude='.jscsrc' \
                 --exclude='.babelrc*' \
                 --exclude='tsconfig.json' \
                 --exclude='tslint.json' \
                 --exclude='*.tgz' \
                 --exclude='*.tar.gz' \
                 --exclude='.git/' \
                 --exclude='test/' \
                 --exclude='tests/' \
                 --exclude='__tests__/' \
                 --exclude='spec/' \
                 --exclude='specs/' \
                 --exclude='example/' \
                 --exclude='examples/' \
                 --exclude='demo/' \
                 --exclude='demos/' \
                 --exclude='doc/' \
                 --exclude='docs/' \
                 --exclude='documentation/' \
                 --exclude='.nyc_output/' \
                 --exclude='coverage/' \
                 --exclude='.cache/' \
                 --exclude='cache/' \
                 --exclude='tmp/' \
                 --exclude='temp/' \
                 node_modules/ "$TEMP_DIR/node_modules/"
        
        # Create the zip package
        cd "$TEMP_DIR"
        zip -r "/tmp/${{ github.sha }}.zip" .
        cd ..
        
        # Clean up temp directory
        rm -rf "$TEMP_DIR"

    - name: üìä Validate package size
      id: package-and-validate
      run: |
        size_bytes=$(du -sb "/tmp/${{ github.sha }}.zip" | cut -f1)
        echo "ZIP size: $(( size_bytes/1024 )) KB"
        if [ "$size_bytes" -gt 52428800 ]; then
          echo "Error: ZIP > 50MB"
          exit 1
        fi

    - name: üì§ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-package-${{ github.sha }}
        path: /tmp/${{ github.sha }}.zip
        retention-days: 7

    - name: üöÄ Deploy to AWS Lambda
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb:///tmp/${{ github.sha }}.zip

    - name: ‚öôÔ∏è Update Lambda Configuration
      run: |
        aws lambda update-function-configuration \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --environment 'Variables={
            "NODE_ENV":"${{ env.NODE_ENV }}",
            "LOG_LEVEL":"${{ env.LOG_LEVEL }}",
            "ENVIRONMENT":"${{ env.ENVIRONMENT }}",
            "BIGQUERY_PROJECT_ID":"${{ env.BIGQUERY_PROJECT_ID }}",
            "BIGQUERY_PRIVATE_KEY":"${{ env.BIGQUERY_PRIVATE_KEY }}",
            "BIGQUERY_CLIENT_EMAIL":"${{ env.BIGQUERY_CLIENT_EMAIL }}",
            "X_API_KEY":"${{ env.X_API_KEY }}"
          }' \
          --timeout 30 \
          --memory-size 512

    - name: üßπ Clean Up Temporary Files
      if: always()
      run: rm -f /tmp/${{ github.sha }}.zip

    - name: ‚úÖ Deployment Summary
      if: success()
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üì¶ Package: ${{ github.sha }}.zip"
        echo "üéØ Environment: ${{ env.ENVIRONMENT }}"
        echo "üöÄ Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "‚è∞ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"