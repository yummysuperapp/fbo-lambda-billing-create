name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:cov

    - name: Generate coverage report
      if: success()
      run: |
        # Run tests with coverage and capture output
        npm run test:cov > coverage_output.txt 2>&1 || true
        
        # Extract test summary
        TEST_FILES=$(grep "Test Files" coverage_output.txt | tail -1 || echo "Test Files: Not found")
        TESTS_COUNT=$(grep "Tests" coverage_output.txt | grep "passed" | tail -1 || echo "Tests: Not found")
        DURATION=$(grep "Duration" coverage_output.txt | tail -1 || echo "Duration: Not found")
        
        # Extract coverage table
        COVERAGE_TABLE=$(awk '/% Coverage report from v8/,/^$/' coverage_output.txt | grep -v "^$" || echo "Coverage table not found")
        
        # Extract overall coverage percentage
        OVERALL_COVERAGE=$(echo "$COVERAGE_TABLE" | grep "All files" | awk '{print $2}' || echo "N/A")
        
        # Create coverage report
        cat > coverage_report.md << EOF
        ## 📊 Test Coverage Report
        
        ### 🎯 Overall Coverage: ${OVERALL_COVERAGE}%
        
        ### 📈 Test Results
        - ✅ **Type Check**: Passed
        - ✅ **Linting**: Passed  
        - ✅ **${TESTS_COUNT}**: All passed
        - ✅ **${TEST_FILES}**: All passed
        - ⏱️ **${DURATION}**
        
        ### 📋 Detailed Coverage Report
        \`\`\`
        ${COVERAGE_TABLE}
        \`\`\`
        
        ### 🔧 Build Information
        - **Node.js**: ${{ env.NODE_VERSION }}
        - **Commit**: \`${{ github.sha }}\`
        - **Branch**: \`${{ github.ref_name }}\`
        - **Workflow**: ${{ github.workflow }}
        - **Run**: #${{ github.run_number }}
        
        ---
        *Generated automatically by GitHub Actions* 🤖
        EOF
        
        echo "Coverage report generated successfully"
        echo "Overall coverage: ${OVERALL_COVERAGE}%"

    - name: Comment coverage on PR
      if: success() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverageReport = fs.readFileSync('coverage_report.md', 'utf8');
          
          // Look for existing coverage comment
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('📊 Test Coverage Report')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });
            console.log('Updated existing coverage comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });
            console.log('Created new coverage comment');
          }

    - name: Upload coverage artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage/
          coverage_report.md
        retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Create deployment package
      run: npm run package

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-deployment-package
        path: lambda-deployment.zip
        retention-days: 30

  # deploy-dev:
  #   name: Deploy to Development
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/develop'
  #   environment: development
    
  #   steps:
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: lambda-deployment-package

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ secrets.AWS_REGION }}

  #   - name: Deploy to Lambda
  #     run: |
  #       aws lambda update-function-code \
  #         --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_DEV }} \
  #         --zip-file fileb://lambda-deployment.zip

  #   - name: Update function configuration
  #     run: |
  #       aws lambda update-function-configuration \
  #         --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_DEV }} \
  #         --environment Variables="{
  #           NODE_ENV=development,
  #           FINANCE_API_BASE_URL=${{ secrets.FINANCE_API_BASE_URL_DEV }},
  #           FINANCE_API_KEY=${{ secrets.FINANCE_API_KEY_DEV }},
  #           SFTP_HOST=${{ secrets.SFTP_HOST_DEV }},
  #           SFTP_USERNAME=${{ secrets.SFTP_USERNAME_DEV }},
  #           SFTP_PASSWORD=${{ secrets.SFTP_PASSWORD_DEV }},
  #           S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_DEV }},
  #           AWS_REGION=${{ secrets.AWS_REGION }}
  #         }"

  # deploy-prod:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
    
  #   steps:
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: lambda-deployment-package

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ secrets.AWS_REGION }}

  #   - name: Deploy to Lambda
  #     run: |
  #       aws lambda update-function-code \
  #         --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_PROD }} \
  #         --zip-file fileb://lambda-deployment.zip

  #   - name: Update function configuration
  #     run: |
  #       aws lambda update-function-configuration \
  #         --function-name ${{ secrets.LAMBDA_FUNCTION_NAME_PROD }} \
  #         --environment Variables="{
  #           NODE_ENV=production,
  #           FINANCE_API_BASE_URL=${{ secrets.FINANCE_API_BASE_URL_PROD }},
  #           FINANCE_API_KEY=${{ secrets.FINANCE_API_KEY_PROD }},
  #           SFTP_HOST=${{ secrets.SFTP_HOST_PROD }},
  #           SFTP_USERNAME=${{ secrets.SFTP_USERNAME_PROD }},
  #           SFTP_PASSWORD=${{ secrets.SFTP_PASSWORD_PROD }},
  #           S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_PROD }},
  #           AWS_REGION=${{ secrets.AWS_REGION }}
  #         }"

  #   - name: Create release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: v${{ github.run_number }}
  #       release_name: Release v${{ github.run_number }}
  #       body: |
  #         Automated release from main branch
          
  #         Changes in this release:
  #         ${{ github.event.head_commit.message }}
  #       draft: false
  #       prerelease: false