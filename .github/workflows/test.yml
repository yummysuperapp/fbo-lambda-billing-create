name: 🧪 Testing Report

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  release:
    types: [ published, created ]

env:
  NODE_VERSION: '22.x'

jobs:
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
      tests-passed: ${{ steps.test-result.outputs.passed }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run type checking
      run: npm run type-check

    - name: 🧹 Run linting
      run: npm run lint

    - name: 🧪 Run tests with coverage
      run: npm run test:cov

    - name: 📊 Generate coverage report
      id: coverage
      if: success()
      run: |
        # Run tests with coverage and capture output
        npm run test:cov > coverage_output.txt 2>&1 || true
        
        # Extract test summary
        TEST_FILES=$(grep "Test Files" coverage_output.txt | tail -1 || echo "Test Files: Not found")
        TESTS_COUNT=$(grep "Tests" coverage_output.txt | grep "passed" | tail -1 || echo "Tests: Not found")
        DURATION=$(grep "Duration" coverage_output.txt | tail -1 || echo "Duration: Not found")
        
        # Extract coverage table
        COVERAGE_TABLE=$(awk '/% Coverage report from v8/,/^$/' coverage_output.txt | grep -v "^$" || echo "Coverage table not found")
        
        # Extract overall coverage percentage - more robust extraction
        OVERALL_COVERAGE=$(grep "All files" coverage_output.txt | awk -F'|' '{gsub(/[ %]/, "", $2); print $2}' || echo "N/A")
        
        # Fallback if first method fails
        if [ "$OVERALL_COVERAGE" = "N/A" ] || [ -z "$OVERALL_COVERAGE" ]; then
          OVERALL_COVERAGE=$(grep "All files" coverage_output.txt | sed 's/.*|[[:space:]]*\([0-9.]*\).*/\1/' || echo "N/A")
        fi
        
        # Set output for other workflows
        echo "coverage=${OVERALL_COVERAGE}" >> $GITHUB_OUTPUT
        
        # Create coverage report
        cat > coverage_report.md << EOF
        ## 📊 Test Coverage Report
        
        ### 🎯 Overall Coverage: ${OVERALL_COVERAGE}%
        
        ### 📈 Test Results
        - ✅ **Type Check**: Passed
        - ✅ **Linting**: Passed  
        - ✅ **${TESTS_COUNT}**: All passed
        - ✅ **${TEST_FILES}**: All passed
        - ⏱️ **${DURATION}**
        
        ### 📋 Detailed Coverage Report
        \`\`\`
        ${COVERAGE_TABLE}
        \`\`\`
        
        ### 🔧 Build Information
        - **Node.js**: ${{ env.NODE_VERSION }}
        - **Commit**: \`${{ github.sha }}\`
        - **Branch**: \`${{ github.ref_name }}\`
        - **Workflow**: ${{ github.workflow }}
        - **Run**: #${{ github.run_number }}
        - **Event**: ${{ github.event_name }}
        
        ---
        *Generated automatically by GitHub Actions* 🤖
        EOF
        
        echo "Coverage report generated successfully"
        echo "Overall coverage: ${OVERALL_COVERAGE}%"

    - name: 💬 Comment coverage on PR
      if: success() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverageReport = fs.readFileSync('coverage_report.md', 'utf8');
          
          // Look for existing coverage comment
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('📊 Test Coverage Report')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });
            console.log('Updated existing coverage comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });
            console.log('Created new coverage comment');
          }

    - name: 📤 Upload coverage artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.run_number }}
        path: |
          coverage/
          coverage_report.md
          coverage_output.txt
        retention-days: 30

    - name: ✅ Set test result
      id: test-result
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "✅ All tests passed successfully"
        else
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "❌ Tests failed"
          exit 1
        fi

  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: 🔍 Check test results
      run: |
        if [ "${{ needs.test.outputs.tests-passed }}" != "true" ]; then
          echo "❌ Quality gate failed: Tests did not pass"
          echo "Coverage: ${{ needs.test.outputs.coverage }}%"
          exit 1
        else
          echo "✅ Quality gate passed: All tests successful"
          echo "Coverage: ${{ needs.test.outputs.coverage }}%"
        fi

    - name: 📊 Quality summary
      run: |
        echo "## 📊 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.test.outputs.tests-passed == 'true' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage**: ${{ needs.test.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY